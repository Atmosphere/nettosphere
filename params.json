{"name":"Nettosphere","tagline":"A Java WebSocket/HTTP server based on the Atmosphere and Netty Framework","body":"## Nettosphere: A Java WebSocket and HTTP server powered by the [Atmosphere Framework](http://github.com/Atmosphere/atmosphere) and the [Netty Framework](http://netty.io/)\r\n\r\nThe easiest way to get started with NettoSphere is to download a sample and start it. [Or look at the Javadoc](http://atmosphere.github.com/nettosphere/apidocs/). You can download one of our [sample](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.atmosphere.nettosphere.samples%22) distribution.\r\n\r\n```bash\r\n   % unzip nettosphere-<name>-distribution.jar\r\n   % chmod a+x ./bin/nettosphere.sh\r\n   % ./bin/nettosphere.sh\r\n```\r\n\r\n[Samples](https://github.com/Atmosphere/atmosphere-samples/tree/master/nettosphere-samples) are the same as then one available in Atmosphere. Bootstrap classes looks like [AtmosphereHandler](https://github.com/Atmosphere/atmosphere-samples/blob/master/nettosphere-samples/chat/src/main/java/org/nettosphere/samples/chat/NettosphereChat.java#L27) or [Jersey](https://github.com/Atmosphere/atmosphere-samples/blob/master/nettosphere-samples/jersey-chat/src/main/java/org/nettosphere/samples/chat/NettosphereJerseyChat.java#L31)\r\n\r\nDownload Nettosphere [here](http://search.maven.org/#search%7Cga%7C1%7Cnettosphere) or use Maven\r\n\r\n```xml\r\n     <dependency>\r\n         <groupId>org.atmosphere</groupId>\r\n         <artifactId>nettosphere</artifactId>\r\n         <version>2.0.0.RC5</version>\r\n     </dependency>\r\n```\r\n\r\n\r\n### Super Simple Web Application\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .resource(MyClass.class)\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n\r\nor\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .resource(new Handler() {\r\n                        void handle(AtmosphereResource r) {\r\n                            r.getResponse().write(\"Hello World\").write(\"from Nettosphere\").flush();\r\n                        }\r\n                    })\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n\r\nAll [Atmosphere](http://jfarcand.wordpress.com/2011/11/07/hitchiker-guide-to-the-atmosphere-framework-using-websocket-long-polling-and-http-streaming/) API supported. As simple as:\r\n\r\n[Top](#Top)\r\n\r\n### Server static and dynamic resources, use atmosphere.xml to configure NettoSphere\r\n\r\n```java\r\n        Config.Builder b = new Config.Builder();\r\n        b.resource(\"./webapps\")\r\n            .port(8080)\r\n            .host(\"127.0.0.1\")\r\n            .configFile(\"../conf/atmosphere.xml\")\r\n            .build();\r\n        Nettosphere s = new Nettosphere.Builder().config(b.build()).build();\r\n```\r\n[Top](#Top)\r\n\r\n### Deploy a Resource (annotated using Jersey), access it using HTTP or WebSocket\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .resource(MyResource.class)\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n[Top](#Top)\r\n\r\n### Deploy an AtmosphereHandler, access it using HTTP or WebSocket\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .resource(\"/*\", MyAtmosphereHandler.class)\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n\r\n### Deploy an AtmosphereHandler, define a WebSocket protocol\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .webSocketProtocol(JMSOverWebSocketProtocol.class)\r\n                    .resource(\"/*\", MyAtmosphereHandler.class)\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n[Top](#Top)\r\n\r\n### Deploy a Servlet which use Meteor\r\n\r\n```java\r\n    Nettosphere server = new Nettosphere.Builder().config(\r\n                 new Config.Builder()\r\n                    .host(\"127.0.0.1\")\r\n                    .port(8080)\r\n                    .resource(\"/*\", MyServlet.class)\r\n                    .build())\r\n                 .build();\r\n    server.start();\r\n```\r\n[Top](#Top)\r\n\r\n### The Server can also be started using java\r\n\r\n```java\r\n    java -cp nettosphere-all.jar\r\n          org.atmosphere.nettosphere.Nettosphere\r\n                [/path/to/an/exploded/war/file] [host] [port]\r\n```\r\n[Top](#Top)\r\n\r\n### Using Maven and the Git repo\r\n\r\n    mvn exec:java -Dexec.arguments='path to your exploded war file'\r\n\r\nWe are on irc.freenode.net under #atmosphere-comet and [Twitter](http://twitter.com/jfarcand)\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/19d5c6b3b9b0ea430efb2fb14370dfab \"githalytics.com\")](http://githalytics.com/Atmosphere/nettosphere)\r\n","google":"UA-31990725-1","note":"Don't delete this file! It's used internally to help with page regeneration."}